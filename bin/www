#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kvizopkn:server');
var http = require('http');
const enc = require('../utils/encryption');

const db = require('../config/db');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server, {
  transports: ['websocket']
});

io.on('connection', (socket) => {

  // radi
  socket.on('join_room', ({ room }) => {
    db.query("SELECT checkLectureStatus($1) as status", [room])
      .then(resp => {
        if(resp.rows[0].status) {
          socket.join(room);
          console.log(io.sockets.adapter.rooms);
          db.query("SELECT * FROM pitanja_za_profesora WHERE predavanje_id = $1 AND odgovoreno = false", [room])
            .then(resp => {
              socket.emit('joined_room', {
                room,
                msg: `Soba ${room}`,
                pitanja: resp.rows
              });
            });
        } else {
          socket.emit("greska", "Predavanje nije aktivno!");
        }
      });
  })

  // radi
  socket.on('msg', function ({ question, room }) {
    console.log(question);
    db.query("insert into pitanja_za_profesora(pitanje_tekst, broj_odobrenja, broj_odbijenica, predavanje_id) values($1, $2, $3, $4) returning *",
      [question, 0, 0, room]
    ).then(result => {
      let pitanje = result.rows[0];
      io.to(room).emit('msg', pitanje);
    }).catch(err => {
      console.log(err);
    })
  });

  socket.on('odobri', function ({ id, room }) {
    console.log(id);
    db.query("UPDATE pitanja_za_profesora SET broj_odobrenja = broj_odobrenja + 1 WHERE predavanje_id=$1 AND id=$2 returning *", [room, id])
      .then(res => {
        io.to(room).emit('odobrenja', { pitanje: res.rows[0] })
      })
      .catch(err => {
        console.log("Nije odobreno");
      });
  });

  socket.on('odgovori', function({ room, id, cookie}) {
    console.log(room, id, cookie);

    if(cookie) {
      db.query("update pitanja_za_profesora set odgovoreno=true where predavanje_id = $1 and id = $2", [room, id])
        .then(() => {
          io.to(room).emit("odgovoreno", id);
        })
        .catch(err => {
          console.log(err);
        });
    }
  })
  
  socket.on("join quiz", ({ soba }) => {
    socket.join(soba);
  })

  socket.on("igrac", function({ soba, igrac }) {
    console.log(igrac);
    io.to(soba).emit("igrac", igrac);
  });

  socket.on("next question", function({ soba, pitanje }) {
    console.log(pitanje.id);
    db.query("select * from odgovor where pitanje_id=$1", [pitanje.id])
      .then(resp => {
        io.to(soba).emit("novo pitanje", {
          pitanje: pitanje,
          odgovori: resp.rows
        })
      })
      .catch(err => {
        console.log(err);
      })
  })

  socket.on("bodoveProfesoru", function(data) {
    console.log("Tu smo")
    console.log(data);

    io.to(data.soba).emit("rezultati", {
      username: data.username,
      bodovi: data.bodovi
    });
  })
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
