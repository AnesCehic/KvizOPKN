#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kvizopkn:server');
var http = require('http');

const db = require('../config/db');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);

io.on('connection', (socket) => {

  socket.on('join_room', ({ room }) => {
   
    socket.join(room);
    console.log(io.sockets.adapter.rooms);
    socket.emit('joined_room', {
      room,
      msg: `Soba ${room}`
    })
  })

  socket.on('msg', function ({ question, room }) {
    console.log(question);
    db.query("insert into pitanja_za_profesora(pitanje_tekst, broj_odobrenja, broj_odbijenica, predavanje_id) values($1, $2, $3, $4) returning id",
      [question, 0, 0, room]
    ).then(result => {
      let id = result.rows[0].id;
      io.to(room).emit('msg', { question, id });
    }).catch(err => {
      console.log(err);
    })
  });

  socket.on('odobri', function ({ pitanje, room }) {
    db.query("UPDATE pitanja_za_profesora SET broj_odobrenja = broj_odobrenja + 1 WHERE predavanje_id=$1 AND pitanje_tekst=$2 returning id, broj_odobrenja", [room, pitanje])
      .then(res => {
        let id = res.rows[0].id;
        let br_od = res.rows[0].broj_odobrenja;
        console.log(res);
        console.log("Odobreno");
        io.to(room).emit('odobrenja', { id, br_od })
      })
      .catch(err => {
        console.log("Nije odobreno");
      });

    
  });
})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
